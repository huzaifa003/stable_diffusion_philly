{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":9115294,"sourceType":"datasetVersion","datasetId":5501898},{"sourceId":9117758,"sourceType":"datasetVersion","datasetId":5503718},{"sourceId":9122347,"sourceType":"datasetVersion","datasetId":5506893},{"sourceId":9122577,"sourceType":"datasetVersion","datasetId":5507056},{"sourceId":9122984,"sourceType":"datasetVersion","datasetId":5507349}],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-07T08:02:17.256457Z","iopub.execute_input":"2024-08-07T08:02:17.256953Z","iopub.status.idle":"2024-08-07T08:02:17.645211Z","shell.execute_reply.started":"2024-08-07T08:02:17.256918Z","shell.execute_reply":"2024-08-07T08:02:17.644240Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/phil2-trial2/phil2.safetensors\n/kaggle/input/realistic-vision-with-lora/realisticVisionV60B1_v51HyperVAE.safetensors\n/kaggle/input/realistic-vision-with-lora/Irfan.safetensors\n/kaggle/input/realistic-vision-with-lora/IrfanBhai.safetensors\n/kaggle/input/realistic-vision-with-lora/IrfanBro.safetensors\n/kaggle/input/phil-hamza-bhai/Phil-08.safetensors\n/kaggle/input/phil-hamza-bhai/Phil-09.safetensors\n/kaggle/input/phil-hamza-bhai/Phil-03.safetensors\n/kaggle/input/phil-hamza-bhai/Phil-05.safetensors\n/kaggle/input/phil-hamza-bhai/Phil-04.safetensors\n/kaggle/input/phil-hamza-bhai/Phil-07.safetensors\n/kaggle/input/phil-hamza-bhai/Phil-10.safetensors\n/kaggle/input/phil-hamza-bhai/Phil-06.safetensors\n/kaggle/input/philtrial1/phil1-000011.safetensors\n/kaggle/input/phil-trial-3/Phil-03.safetensors\n","output_type":"stream"}]},{"cell_type":"code","source":"!pip install diffusers","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install PEFT","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"pip show PEFT","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from diffusers import StableDiffusionPipeline\nimport torch\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pipeline2 = StableDiffusionPipeline.from_single_file(\n    \"/kaggle/input/realistic-vision-with-lora/realisticVisionV60B1_v51HyperVAE.safetensors\"\n).to('cuda')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pipeline2.load_lora_weights(\"/kaggle/input/phil-trial-3/Phil-03.safetensors\",adapter_name=\"phil2\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prompt = \"Phil laughing like gangster, upper body, realistic, hd\"\n\nnegative_prompt = \"Blurry, deformed, low quality, bad anatomy, disfigured, poorly drawn face, mutation, mutated, extra limb, ugly, poorly drawn hands, missing limb, floating limbs, disconnected limbs, malformed hands, out of focus, long neck, long body, distorted, bad proportions, gross proportions, text, watermark, signature\"\n\nimage = pipeline2(\n    prompt,\n    negative_prompt=negative_prompt,\n    num_inference_steps=60,\n    guidance_scale=4,\n    \n#     seed=42,\n    num_images_per_prompt=4  # if available in your pipeline\n)\n\n# If num_images_per_prompt is used, you'll have multiple images to choose from\nbest_image = image.images[0]  # or whichever index you prefer","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"image.images[0]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### best_image[2]","metadata":{"execution":{"iopub.status.busy":"2024-08-06T07:44:24.212321Z","iopub.execute_input":"2024-08-06T07:44:24.213047Z","iopub.status.idle":"2024-08-06T07:44:24.269680Z","shell.execute_reply.started":"2024-08-06T07:44:24.213010Z","shell.execute_reply":"2024-08-06T07:44:24.268414Z"}}},{"cell_type":"code","source":"prompt = \"phil2 standing straight in front of camera and crying, realistic, hd\"\n\nnegative_prompt = \"Blurry, deformed, low quality, bad anatomy, disfigured, poorly drawn face, mutation, mutated, extra limb, ugly, poorly drawn hands, missing limb, floating limbs, disconnected limbs, malformed hands, out of focus, long neck, long body, distorted, bad proportions, gross proportions, text, watermark, signature\"\n\nimage = pipeline2(\n    prompt,\n    negative_prompt=negative_prompt,\n    num_inference_steps=40,\n    guidance_scale=2,\n    \n#     seed=42,\n    num_images_per_prompt=1  # if available in your pipeline\n)\n\n# If num_images_per_prompt is used, you'll have multiple images to choose from\nbest_image = image.images[0]  # or whichever index you prefer","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"image.images[0]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"image.images[0]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prompt = \"phil2 in front of gym, wearing track suite,closeup shot\"\n\nnegative_prompt = \"Blurry, deformed, low quality, bad anatomy, disfigured, poorly drawn face, mutation, mutated, ugly, poorly drawn hands, missing limb, malformed hands, out of focus, long neck, long body, distorted, bad proportions, gross proportions, text, watermark, signature\"\n\nimage = pipeline2(\n    prompt,\n    negative_prompt=negative_prompt,\n    num_inference_steps=100,\n    guidance_scale=2,\n    \n#     seed=42,\n    num_images_per_prompt=1  # if available in your pipeline\n)\n\n# If num_images_per_prompt is used, you'll have multiple images to choose from\nbest_image = image.images[0]  # or whichever index you prefer","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"image.images[0]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_id = \"runwayml/stable-diffusion-v1-5\"\npipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\npipe = pipe.to(\"cuda\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pipe.load_lora_weights(\"/kaggle/input/realistic-vision-with-lora/IrfanBro.safetensors\",adapter_name=\"Irfan\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prompt = \"IrfanBro\"\n\nnegative_prompt = \"Blurry, deformed, low quality, bad anatomy, disfigured, poorly drawn face, mutation, mutated, extra limb, ugly, poorly drawn hands, missing limb, floating limbs, disconnected limbs, malformed hands, out of focus, long neck, long body, distorted, bad proportions, gross proportions, text, watermark, signature\"\n\nimage = pipe(\n    prompt,\n    negative_prompt=negative_prompt,\n    num_inference_steps=60,\n    guidance_scale=3,\n#     seed=42,\n    num_images_per_prompt=4  # if available in your pipeline\n)\n\n# If num_images_per_prompt is used, you'll have multiple images to choose from\nbest_image = image.images[0]  # or whichever index you prefer","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"image.images[2]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}